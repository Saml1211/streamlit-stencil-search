---
description: 
globs: 
alwaysApply: true
---
# Visio Stencil Search Project Journal

## Project Overview
This journal documents important insights, patterns, and project-specific knowledge for the Visio Stencil Search application. The application is designed to help users search through Microsoft Visio stencil files without requiring Visio to be installed, with optional Visio integration for enhanced workflow when available. Recently expanded into the Visio Bridge Integration Suite, it now includes a Chrome extension, local API server, and MCP server for AI assistant integration.

## Key Project Patterns

### Architecture Patterns
- The application follows a clean separation between business logic (in `app/core/`) and presentation (in `pages/`)
- Streamlit is used as the primary UI framework, with a multi-page structure using st.navigation
- Data persistence is handled through SQLite with optimized indexing and full-text search (FTS5)
- The application follows a modular design with clear component boundaries
- Core scanning and parsing logic is isolated from UI rendering code
- Visio integration is optional and enhances functionality when available
- Error handling is implemented at multiple levels: global, component, and UI feedback
- Database operations are wrapped with transaction management and locking for thread safety
- Responsive design is implemented with JavaScript for adapting to different screen sizes
- Background processing for long-running operations maintains UI responsiveness
- Bridge pattern implemented for MCP server to communicate with local API
- Layered architecture with clear separation between protocol handling and business logic

### Development Workflow
- The codebase is organized in a modular fashion with clear component boundaries
- Python modules in `app/core/` implement the core functionality
- Streamlit pages in `pages/` implement the user interface
- Configuration is centralized in `config.yaml` for easier maintenance
- Error handling is implemented at appropriate abstraction levels
- Memory bank documentation tracks project progress and architecture
- Comprehensive logging system with configurable levels (debug, info, warning, error)
- Database integrity is checked at startup with automatic repair mechanisms
- File handling includes graceful error recovery for inaccessible or corrupted files
- Version control supports managed development process
- Asynchronous programming for the MCP server to handle concurrent requests
- Tool-based architecture for MCP server to expose functionality to AI assistants
- When launching background Python scripts via `run_terminal_cmd` in PowerShell, prefer passing critical configurations (like network URLs) via command-line arguments rather than attempting to set environment variables within the same command string, as propagation can be unreliable.
- Ensure the correct Python executable from the relevant virtual environment (`venv\\Scripts\\python.exe`) is used when running scripts via `run_terminal_cmd`, particularly after dependency installations or when troubleshooting module errors.
- Use the **MCP Inspector** tool (`npx @modelcontextprotocol/inspector`) for interactive testing and debugging of the `visio-bridge` MCP server, especially when encountering issues with direct tool calls from the assistant environment.

### Streamlit Patterns
- Each page has its own file in the `pages/` directory with a numerical prefix for ordering
- The main app entry point (app.py) uses Streamlit's navigation feature to define the pages
- Streamlit session state is used for maintaining application state across page refreshes
- UI components are organized with standard patterns: sidebar for settings, main area for results
- Components are reused across pages using shared component modules
- Progress indicators provide feedback during long-running operations
- Custom CSS and JavaScript enhance the default Streamlit styling
- Card-based layout with expanders for progressive disclosure
- Consistent component spacing and styling for visual hierarchy
- Error messages are displayed with appropriate context and visibility

### Extension & API Patterns
- Chrome extension uses Manifest V3 with event-based architecture
- Content scripts for webpage interaction
- Background service worker for main extension logic
- Message passing for communication between content scripts and service worker
- Region selection implemented with custom overlay
- FastAPI for local API server with asynchronous endpoints
- PyWin32 for COM automation with Visio
- Bridge layer for connecting MCP to local API server
- Tool registration pattern for MCP server capabilities

### Data Handling
- Stencil data is cached in SQLite database for performance
- Full-text search (FTS5) used for optimized search operations
- Configuration is stored in a YAML file (config.yaml)
- Search operations are optimized with appropriate indexing strategies
- Large result sets are managed with pagination and filtering
- Data structures are designed to minimize memory usage while maintaining performance
- Database integrity checking with automatic repair capabilities
- Shape geometry is stored as serialized JSON for preview generation
- Foreign key constraints ensure data consistency
- Database backup is performed before potentially destructive operations
- Transaction management prevents partial operations
- JSON for MCP server configuration and communication
- Base64 encoding for image data transfer

### File Operations
- The application supports recursive directory scanning for Visio files
- It handles various Visio file formats (.vss, .vssx, .vssm, .vst, .vstx, .vsdx)
- Shape preview functionality extracts graphical information without requiring Visio
- Network paths are normalized to handle cross-platform issues
- Temporary file handling includes proper cleanup and error recovery
- File locking issues are handled gracefully when possible
- Favorites system for quick access to frequently used stencils
- XML parsing extracts shape data from Office Open XML formats
- ZIP handling for modern Visio file formats (which are actually ZIP archives)
- Cross-platform path normalization for compatibility
- Temporary file creation for image data in Visio import operations

## UI Implementation Patterns
- Three-column layout for search results (shape, stencil, location)
- Consistent icons used throughout the interface
- Expandable/collapsible sections for detailed information
- Data visualization used for health analysis and statistics
- Interactive elements provide immediate feedback
- Responsive design adapts to different screen sizes
- Preview functionality is modally displayed to avoid cluttering the main interface
- Clear visual hierarchy with consistent spacing and typography
- Toggle controls for boolean options
- Preset management for commonly used directories
- Card-based containers for visual organization
- Tabbed interfaces to separate different functionality areas
- Progress bars and spinners for long-running operations
- Status indicators for connection state and background processes
- Form validation with appropriate error messages
- Chrome extension popup with action buttons and status feedback
- Region selection with visual overlay for screenshot capture

## User Preferences
- Clean, minimal UI with clear information presentation
- Fast search response times are prioritized
- Comprehensive stencil health analysis is valued
- Network path handling is important for shared environments
- Copy-paste functionality for file paths is frequently used
- Preview quality is important but acceptable tradeoffs for speed
- Direct Visio integration when available improves workflow efficiency
- Favorites for quickly accessing frequently used stencils
- Shape collection for batch operations
- Flexible filtering options for different search scenarios
- Visual feedback during long operations
- Remote Visio connectivity for distributed teams
- Multi-document and multi-page support
- Shape editing capabilities directly from the interface
- Natural language interaction with Visio through AI assistants
- Web content capture and import into Visio diagrams

## MCP Server Patterns
- Model Context Protocol implementation for AI assistant integration
- Tool-based architecture for exposing functionality
- Bridge layer for communicating with local API server
- Asynchronous HTTP client for API communication
- Comprehensive error handling with structured error responses
- Detailed logging for troubleshooting
- Configuration through JSON and environment variables
- Rate limiting for request throttling
- Remote connection support for distributed environments
- Formatted text responses for optimal AI assistant interaction
- Tool documentation with clear parameter descriptions
- Security considerations for local-only operation
- Testing utilities for server verification
- Utilize the **MCP Inspector** tool (`npx @modelcontextprotocol/inspector`) for reliable testing and debugging (UI & CLI modes).

## Known Challenges
- Memory usage can be high when scanning large stencil collections
- Some cross-platform compatibility issues exist, especially for network paths
- Performance optimization is an ongoing concern
- Some Visio file formats are more challenging to parse than others
- Error handling for corrupted files requires careful implementation
- Database locking can occur with concurrent operations
- UI responsiveness can decrease during background scanning operations
- Visio COM integration is Windows-specific and can be unstable
- Complex shape previews may not render accurately without Visio
- Remote server connections can be unstable depending on network conditions
- FTS rebuilding is time-consuming for large databases
- Geometry extraction is incomplete for certain complex shape types
- JavaScript integration has browser compatibility considerations
- Chrome extension region selection may have issues on high-DPI displays
- MCP server requires manual configuration of AI assistant clients
- Remote Visio setup requires careful configuration for Mac-to-Windows connection
- Invoking MCP tools (e.g., `mcp_visio_bridge_check_visio_connection`) via the assistant's environment can sometimes fail with network resolution errors (`getaddrinfo failed`), even when direct checks (`curl`) or the MCP server's own startup checks succeed. This suggests potential differences in network stack interaction or resolution within the assistant's tool execution context.

## Evolution of Decisions
- Started with a simple file scanner, evolved to include health analysis and temp file cleaning
- Initially focused on core search functionality, later expanded to include Visio integration
- Performance optimizations have been added iteratively as the application matured
- SQLite chosen over more complex database systems for deployment simplicity
- Streamlit selected for rapid development over custom web frameworks
- Shape preview generation implemented custom rather than requiring Visio dependency
- Added full-text search capabilities for improved performance with large collections
- Integrated direct Visio control for enhanced workflow when available
- Added remote Visio server connection support for distributed teams
- Implemented database integrity checking with automatic repair
- Enhanced error handling with comprehensive logging system
- Added responsive design with JavaScript for better mobile experience
- Expanded to include Chrome extension for web content capture
- Added local API server with FastAPI for Chrome extension communication
- Implemented MCP server for AI assistant integration
- Preferred asyncio for MCP server to handle concurrent requests
- Selected Model Context Protocol for AI assistant integration
- Implemented bridge pattern for MCP-to-local-API communication

## Tool Usage Patterns
- Streamlit for all UI components
- Pandas for data manipulation and analysis
- Matplotlib and Plotly for data visualization
- SQLite for data storage and querying with FTS5
- LXML for XML parsing of Visio files
- PyYAML for configuration management
- Pydantic for data validation
- PyWin32 for optional Visio integration via COM/DCOM
- Pillow for image processing in shape preview
- Threading for background operations
- TQDM for progress tracking
- XlsxWriter for Excel export functionality
- FastAPI for local API server
- Manifest V3 for Chrome extension
- JavaScript for browser-side functionality
- HTTPX for asynchronous HTTP requests
- MCP SDK for Model Context Protocol implementation
- JSON for configuration and data exchange

## Common Implementation Techniques
- Background processing for long-running tasks
- Caching of results to improve performance on repeated operations
- Progressive loading of large datasets
- Parallelization of file scanning operations where appropriate
- User feedback during long operations with progress bars
- Graceful error handling with informative messages
- Efficient data structures optimized for search operations
- Database transactions for ensuring data integrity
- Modular components for code reuse across pages
- Custom CSS for enhanced visual presentation
- Responsive design techniques for different screen sizes
- Database indexes for optimized query performance
- XML parsing for extracting shape data from Visio files
- Path normalization for cross-platform compatibility
- Connection pooling for database access
- Automatic recovery from transient failures
- Dynamic UI updates based on screen size
- Progressive disclosure of advanced features
- State management across page reloads
- Backup and restoration procedures for data safety
- Bridge pattern for connecting different components
- Asynchronous programming for responsive interfaces
- Message passing for extension component communication
- Tool registration for MCP server capabilities
- Formatted text responses for AI assistant consumption
- Error categorization for appropriate feedback
- Environment variable overrides for configuration

This journal will be updated as new patterns and insights are discovered during the project's development.